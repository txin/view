// singleton class
// share the location
#include <opencv2/imgproc/imgproc.hpp>
#include <pthread.h>
#include "StereoView.h"

#define EYEBOX_SIDE 20

class Global {

private:
    // eye position from EyeTracking class
    cv::Point *position;
    // depth image generated from StereoView class
    int *depth;
    cv::Mat *depthImg;
    // bounding boxes of the eyes for different cameras
    cv::Mat *eyeBox[CAMERA_NUM];


    // 3D point
    cv::Point3f *eye3DPosition; 

    cv::Point *eyePosition[CAMERA_NUM];
    // face rectangle from eyeTracking class
    cv::Rect *faceRect;
    // running status
    bool* running;
    pthread_mutex_t start;
    // eye position from EyeTracking class
    // share with Cube class to compute the dynamic view matrix
    Global();
    // TODO: delete the space generated by new
public:
    inline static Global& getInstance() {
        static Global instance;
        return instance;        
    }
    void setEyePosition(cv::Point posIn);
    void setEyePosition(cv::Point posIn, int index); 

    void setDepthImg(cv::Mat& img3D);
    void setRunningStatus(bool val);
    void setFaceRect(cv::Rect rect);
    void setEyeBox(int index, cv::Mat eyeMat);
    void setEyeDepth(int val);
  
    cv::Point getEyePosition();
    cv::Rect getFaceRect();
    void getDepthData(int row, int col);
    bool getRunningStatus();
    cv::Mat getEyeBox(int index);
    int getEyeDepth();
    cv::Point getEyePosition(int index);




    cv::Point3f getEye3DPosition();
    void setEye3DPosition(cv::Point3f point);
};
